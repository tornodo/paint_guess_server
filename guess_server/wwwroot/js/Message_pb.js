/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Protocol', null, global);
goog.exportSymbol('proto.Protocol.ProtocolType', null, global);
goog.exportSymbol('proto.RoomInfo', null, global);
goog.exportSymbol('proto.RoomUser', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RoomUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RoomUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RoomUser.displayName = 'proto.RoomUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RoomUser.prototype.toObject = function(opt_includeInstance) {
  return proto.RoomUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RoomUser} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RoomUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seat: jspb.Message.getFieldWithDefault(msg, 2, 0),
    avatar: jspb.Message.getFieldWithDefault(msg, 3, ""),
    score: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RoomUser}
 */
proto.RoomUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RoomUser;
  return proto.RoomUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RoomUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RoomUser}
 */
proto.RoomUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeat(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RoomUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RoomUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RoomUser} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RoomUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeat();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.RoomUser.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RoomUser.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 seat = 2;
 * @return {number}
 */
proto.RoomUser.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.RoomUser.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string avatar = 3;
 * @return {string}
 */
proto.RoomUser.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.RoomUser.prototype.setAvatar = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 score = 4;
 * @return {number}
 */
proto.RoomUser.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.RoomUser.prototype.setScore = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RoomInfo.displayName = 'proto.RoomInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.RoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RoomInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    counts: jspb.Message.getFieldWithDefault(msg, 2, 0),
    avatar: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gamebegin: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RoomInfo}
 */
proto.RoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RoomInfo;
  return proto.RoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RoomInfo}
 */
proto.RoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCounts(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGamebegin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RoomInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RoomInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCounts();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGamebegin();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.RoomInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RoomInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 counts = 2;
 * @return {number}
 */
proto.RoomInfo.prototype.getCounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.RoomInfo.prototype.setCounts = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string avatar = 3;
 * @return {string}
 */
proto.RoomInfo.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.RoomInfo.prototype.setAvatar = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool gameBegin = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.RoomInfo.prototype.getGamebegin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.RoomInfo.prototype.setGamebegin = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protocol.repeatedFields_, null);
};
goog.inherits(proto.Protocol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.displayName = 'proto.Protocol';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protocol.repeatedFields_ = [14,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    broadcast: jspb.Message.getFieldWithDefault(msg, 3, false),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    avatar: jspb.Message.getFieldWithDefault(msg, 5, ""),
    seat: jspb.Message.getFieldWithDefault(msg, 6, 0),
    roomKey: jspb.Message.getFieldWithDefault(msg, 7, ""),
    roomName: jspb.Message.getFieldWithDefault(msg, 8, ""),
    message: jspb.Message.getFieldWithDefault(msg, 9, ""),
    beginPoint: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    endPoint: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    penSize: jspb.Message.getFieldWithDefault(msg, 12, 0),
    color: jspb.Message.getFieldWithDefault(msg, 13, 0),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.RoomUser.toObject, includeInstance),
    roomsList: jspb.Message.toObjectList(msg.getRoomsList(),
    proto.RoomInfo.toObject, includeInstance),
    code: jspb.Message.getFieldWithDefault(msg, 16, 0),
    error: jspb.Message.getFieldWithDefault(msg, 17, ""),
    id: jspb.Message.getFieldWithDefault(msg, 18, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol}
 */
proto.Protocol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol;
  return proto.Protocol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol}
 */
proto.Protocol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!proto.Protocol.ProtocolType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBroadcast(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeat(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomKey(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomName(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBeginPoint(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndPoint(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPenSize(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColor(value);
      break;
    case 14:
      var value = new proto.RoomUser;
      reader.readMessage(value,proto.RoomUser.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 15:
      var value = new proto.RoomInfo;
      reader.readMessage(value,proto.RoomInfo.deserializeBinaryFromReader);
      msg.addRooms(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getBroadcast();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSeat();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getRoomKey();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRoomName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getBeginPoint();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getEndPoint();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getPenSize();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getColor();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.RoomUser.serializeBinaryToWriter
    );
  }
  f = message.getRoomsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.RoomInfo.serializeBinaryToWriter
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Protocol.ProtocolType = {
  LOGIN: 0,
  CREATE_ROOM: 1,
  JOIN_ROOM: 2,
  LEAVE_ROOM: 3,
  CHAT: 4,
  GAME_BEGIN: 5,
  GAME_END: 6,
  PAINT: 7,
  ENTERED_ROOM: 8,
  LEAVED_ROOM: 9,
  OFFLINE: 10,
  ONLINE: 11,
  READY: 12,
  UPDATE_USER: 13,
  COUNTDOWN: 14,
  GAME_FINISHED: 15,
  ROOM_LIST: 16
};

/**
 * optional string key = 1;
 * @return {string}
 */
proto.Protocol.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protocol.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ProtocolType type = 2;
 * @return {!proto.Protocol.ProtocolType}
 */
proto.Protocol.prototype.getType = function() {
  return /** @type {!proto.Protocol.ProtocolType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Protocol.ProtocolType} value */
proto.Protocol.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool broadcast = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Protocol.prototype.getBroadcast = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Protocol.prototype.setBroadcast = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.Protocol.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Protocol.prototype.setName = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string avatar = 5;
 * @return {string}
 */
proto.Protocol.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Protocol.prototype.setAvatar = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 seat = 6;
 * @return {number}
 */
proto.Protocol.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Protocol.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string room_key = 7;
 * @return {string}
 */
proto.Protocol.prototype.getRoomKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.Protocol.prototype.setRoomKey = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string room_name = 8;
 * @return {string}
 */
proto.Protocol.prototype.getRoomName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.Protocol.prototype.setRoomName = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string message = 9;
 * @return {string}
 */
proto.Protocol.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.Protocol.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional double begin_point = 10;
 * @return {number}
 */
proto.Protocol.prototype.getBeginPoint = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.Protocol.prototype.setBeginPoint = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional double end_point = 11;
 * @return {number}
 */
proto.Protocol.prototype.getEndPoint = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.Protocol.prototype.setEndPoint = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional int32 pen_size = 12;
 * @return {number}
 */
proto.Protocol.prototype.getPenSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.Protocol.prototype.setPenSize = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional int32 color = 13;
 * @return {number}
 */
proto.Protocol.prototype.getColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.Protocol.prototype.setColor = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * repeated RoomUser users = 14;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.RoomUser>}
 */
proto.Protocol.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.RoomUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RoomUser, 14));
};


/** @param {!Array.<!proto.RoomUser>} value */
proto.Protocol.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.RoomUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RoomUser}
 */
proto.Protocol.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.RoomUser, opt_index);
};


proto.Protocol.prototype.clearUsersList = function() {
  this.setUsersList([]);
};


/**
 * repeated RoomInfo rooms = 15;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.RoomInfo>}
 */
proto.Protocol.prototype.getRoomsList = function() {
  return /** @type{!Array.<!proto.RoomInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RoomInfo, 15));
};


/** @param {!Array.<!proto.RoomInfo>} value */
proto.Protocol.prototype.setRoomsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.RoomInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RoomInfo}
 */
proto.Protocol.prototype.addRooms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.RoomInfo, opt_index);
};


proto.Protocol.prototype.clearRoomsList = function() {
  this.setRoomsList([]);
};


/**
 * optional int32 code = 16;
 * @return {number}
 */
proto.Protocol.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.Protocol.prototype.setCode = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional string error = 17;
 * @return {string}
 */
proto.Protocol.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.Protocol.prototype.setError = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional int32 id = 18;
 * @return {number}
 */
proto.Protocol.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.Protocol.prototype.setId = function(value) {
  jspb.Message.setField(this, 18, value);
};


goog.object.extend(exports, proto);
